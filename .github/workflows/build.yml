name: ðŸš€ Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build:ts
      
    - name: Build Vite
      run: npm run build:vite
      
    - name: Build Electron (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run build:win
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        CSC_IDENTITY_AUTO_DISCOVERY: false
      
    - name: Build Electron (Linux)
      if: matrix.os == 'ubuntu-latest'  
      run: npm run build:linux
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
      
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          release/*.exe
          release/win-unpacked/
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          release/*.AppImage
          release/linux-unpacked/
          


  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release with gh CLI
      env:
        TAG_NAME: ${{ github.ref_name }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${TAG_NAME} \
          --title "HTB Academy Scraper ${TAG_NAME}" \
          --notes "ðŸŽ‰ **Nouvelle release automatique !**
        
        âœ… **Windows** : .exe inclus
        âœ… **Linux** : .AppImage inclus
        
        **Commit :** ${{ github.sha }}
        **Message :** ${{ github.event.head_commit.message }}
        
        **Installation :**
        - Windows : TÃ©lÃ©chargez le .exe
        - Linux : TÃ©lÃ©chargez le .AppImage et rendez-le exÃ©cutable" \
          --latest
        
        # Extract version from tag (remove 'v' prefix)
        VERSION=${TAG_NAME#v}
        
        gh release upload ${TAG_NAME} \
          "windows-build/HTB Academy Scraper Setup ${VERSION}.exe" \
          "linux-build/HTB Academy Scraper-${VERSION}.AppImage" \
          --clobber
    

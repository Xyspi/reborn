name: ðŸš€ Build and Release

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build:ts
      
    - name: Build Vite
      run: npm run build:vite
      
    - name: Build Electron (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run build:win
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        CSC_IDENTITY_AUTO_DISCOVERY: false
      
    - name: Build Electron (Linux)
      if: matrix.os == 'ubuntu-latest'  
      run: npm run build:linux
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
      
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          release/*.exe
          release/win-unpacked/
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          release/*.AppImage
          release/linux-unpacked/
          


  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Get version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: v$VERSION"
      
    - name: Create Release Notes
      run: |
        cat > release-notes.md << 'EOF'
        ðŸŽ‰ **Nouvelle release automatique !**
        
        âœ… **Windows** : .exe inclus
        âœ… **Linux** : .AppImage inclus
        
        **Commit :** ${{ github.sha }}
        **Message :** $(echo "${{ github.event.head_commit.message }}" | head -1)
        
        **Installation :**
        - Windows : TÃ©lÃ©chargez le .exe
        - Linux : TÃ©lÃ©chargez le .AppImage et rendez-le exÃ©cutable
        EOF

    - name: Create or update tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # If push to main, create tag from package.json version
          TAG_NAME="${{ steps.package-version.outputs.version }}"
          git tag $TAG_NAME || echo "Tag $TAG_NAME already exists"
          git push origin $TAG_NAME || echo "Tag $TAG_NAME already pushed"
        else
          # If already a tag, use it
          TAG_NAME="${{ github.ref_name }}"
        fi
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Create Release with gh CLI
      run: |
        gh release create $TAG_NAME \
          --title "Reborn $TAG_NAME" \
          --notes-file release-notes.md \
          --latest || echo "Release already exists"
        
        gh release upload $TAG_NAME \
          windows-build/Reborn.exe \
          linux-build/Reborn.AppImage \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
